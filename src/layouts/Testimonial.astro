---
interface Props {
  photo?: string;
  quote: string;
  author: string;
  city?: string;
}

const { photo = '', quote, author, city = 'Tarapoto' }: Props = Astro.props;

const id = `photo-${author.toLowerCase().replace(/\s+/g, '-')}`;
const btnId = `btn-${id}`;
---
<figure class="card p-8 text-center relative hover:shadow-lg transition-transform hover:-translate-y-1">
  <button
    id={btnId}
    type="button"
    class="mx-auto h-32 w-32 rounded-full ring-4 ring-yellow-300 overflow-hidden hover:scale-105 transition-transform focus:outline-none"
    aria-label={`Ver foto de ${author}`}
  >
    {photo
      ? <img src={photo} alt={author} class="h-full w-full object-cover object-center" loading="lazy" />
      : <div class="h-full w-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-gray-500">üë§</div>
    }
  </button>

  <blockquote class="italic mt-5 text-gray-700 dark:text-gray-300 text-lg leading-relaxed">‚Äú{quote}‚Äù</blockquote>
  <figcaption class="mt-3 font-semibold text-gray-900 dark:text-gray-100 text-lg">{author}</figcaption>
  <p class="text-sm text-gray-500 dark:text-gray-400">{city}</p>

  {photo && (
    <div
      id={id}
      class="fixed inset-0 hidden bg-black/70 backdrop-blur-sm flex items-center justify-center z-50"
    >
      <div
        class="relative max-w-[90vw] max-h-[90vh] flex flex-col items-center justify-center animate-fadein"
      >
        <img
          src={photo}
          alt={`Foto de ${author}`}
          class="rounded-2xl shadow-2xl border-4 border-white dark:border-gray-700 opacity-0 scale-95 transition-all duration-300 ease-out"
        />
        <p class="mt-4 text-white font-semibold text-lg">{author}</p>
        <p class="text-yellow-300 italic text-sm">‚Äú{quote}‚Äù</p>
      </div>
    </div>
  )}
</figure>

<style is:global>
  @keyframes fadein {
    from { opacity: 0; transform: scale(0.95); }
    to { opacity: 1; transform: scale(1); }
  }
  .animate-fadein {
    animation: fadein 0.3s ease-out forwards;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('${btnId}');
    const modal = document.getElementById('${id}');
    const img = modal?.querySelector('img');

    if (!btn || !modal || !img) return;

    btn.onclick = () => {
      modal.classList.remove('hidden');
      requestAnimationFrame(() => {
        img.classList.remove('opacity-0', 'scale-95');
        img.classList.add('opacity-100', 'scale-100');
      });
    };

    modal.onclick = (e) => {
      if (e.target === modal) {
        img.classList.add('opacity-0', 'scale-95');
        setTimeout(() => modal.classList.add('hidden'), 300);
      }
    };

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        img.classList.add('opacity-0', 'scale-95');
        setTimeout(() => modal.classList.add('hidden'), 300);
      }
    });
  });
</script>
