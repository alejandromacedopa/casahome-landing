---
interface Props {
  image: string;
  title: string;
  desc: string;
  perks?: string[];
  status?: string;
}
const { image, title, desc, perks = [], status = 'Disponible' }: Props = Astro.props;
const soldOut = status.toLowerCase() !== 'disponible';
---

// Marcamos la tarjeta completa para medir clics de inter√©s por proyecto
<article
  class="card overflow-hidden group hover:-translate-y-1 hover:shadow-xl transition-all duration-300"
  data-event="proyecto"
  data-project={title}
  role="button"
  tabindex="0"
>
  <div class="relative aspect-[4/3] w-full">
    <img src={image} alt={title} class="absolute inset-0 w-full h-full object-cover" loading="lazy" />
    <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition bg-gradient-to-t from-black/40 to-transparent"></div>
    <span class={`absolute left-4 top-4 pill ${soldOut ? 'bg-gray-300 text-gray-800 dark:bg-gray-700 dark:text-gray-100' : ''}`}>
      {status}
    </span>
  </div>

  <div class="p-6">
    <h3 class="text-2xl font-semibold text-gray-900 dark:text-white">{title}</h3>
    <p class="mt-2 text-gray-600 dark:text-gray-300 text-sm md:text-base leading-relaxed">{desc}</p>

    {perks.length > 0 && (
      <ul class="mt-4 flex flex-wrap gap-2">
        {perks.map((p: string) => (
          <li class="pill bg-yellow-100 text-yellow-800 dark:bg-yellow-700 dark:text-yellow-100">{p}</li>
        ))}
      </ul>
    )}
  </div>
</article>
